#include <stdio.h>

#include <stdlib.h>

#include <pthread.h>

#include <unistd.h>



#define NUM_PHILOSOPHERS 5



// Mutexes for forks

pthread_mutex_t forks[NUM_PHILOSOPHERS];



// Function that each philosopher will execute

void* philosopher(void* num) {

    int id = *(int*)num;

    int left_fork = id;

    int right_fork = (id + 1) % NUM_PHILOSOPHERS;



    while (1) {

        printf("Philosopher %d is thinking.\n", id);

        sleep(1);  // Simulate thinking



        // Try to pick up the left fork

        pthread_mutex_lock(&forks[left_fork]);

        printf("Philosopher %d picked up fork %d (left).\n", id, left_fork);



        // Try to pick up the right fork

        pthread_mutex_lock(&forks[right_fork]);

        printf("Philosopher %d picked up fork %d (right).\n", id, right_fork);



        // Eat

        printf("Philosopher %d is eating.\n", id);

        sleep(2);  // Simulate eating



        // Put down the right fork

        pthread_mutex_unlock(&forks[right_fork]);

        printf("Philosopher %d put down fork %d (right).\n", id, right_fork);



        // Put down the left fork

        pthread_mutex_unlock(&forks[left_fork]);

        printf("Philosopher %d put down fork %d (left).\n", id, left_fork);

    }

    pthread_exit(NULL);

}



int main() {

    pthread_t threads[NUM_PHILOSOPHERS];

    int philosopher_ids[NUM_PHILOSOPHERS];

    int i;



    // Initialize mutexes for forks

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {

        pthread_mutex_init(&forks[i], NULL);

    }



    // Create philosopher threads

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {

        philosopher_ids[i] = i;

        if (pthread_create(&threads[i], NULL, philosopher, (void*)&philosopher_ids[i])) {

            fprintf(stderr, "Error creating thread %d\n", i);

            return 1;

        }

    }



    // Wait for all threads to finish (which they never will in this case)

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {

        pthread_join(threads[i], NULL);

    }



    // Destroy mutexes

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {

        pthread_mutex_destroy(&forks[i]);

    }



    return 0;

}
